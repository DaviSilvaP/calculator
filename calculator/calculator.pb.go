// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculator/calculator.proto

package calculator

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Recebe os valores para a soma
type NumRequest struct {
	A                    float64  `protobuf:"fixed64,1,opt,name=a,proto3" json:"a,omitempty"`
	B                    float64  `protobuf:"fixed64,2,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumRequest) Reset()         { *m = NumRequest{} }
func (m *NumRequest) String() string { return proto.CompactTextString(m) }
func (*NumRequest) ProtoMessage()    {}
func (*NumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efa30b76d83302dd, []int{0}
}

func (m *NumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumRequest.Unmarshal(m, b)
}
func (m *NumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumRequest.Marshal(b, m, deterministic)
}
func (m *NumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumRequest.Merge(m, src)
}
func (m *NumRequest) XXX_Size() int {
	return xxx_messageInfo_NumRequest.Size(m)
}
func (m *NumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NumRequest proto.InternalMessageInfo

func (m *NumRequest) GetA() float64 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *NumRequest) GetB() float64 {
	if m != nil {
		return m.B
	}
	return 0
}

type NumSRequest struct {
	Num                  float64  `protobuf:"fixed64,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumSRequest) Reset()         { *m = NumSRequest{} }
func (m *NumSRequest) String() string { return proto.CompactTextString(m) }
func (*NumSRequest) ProtoMessage()    {}
func (*NumSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efa30b76d83302dd, []int{1}
}

func (m *NumSRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumSRequest.Unmarshal(m, b)
}
func (m *NumSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumSRequest.Marshal(b, m, deterministic)
}
func (m *NumSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumSRequest.Merge(m, src)
}
func (m *NumSRequest) XXX_Size() int {
	return xxx_messageInfo_NumSRequest.Size(m)
}
func (m *NumSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NumSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NumSRequest proto.InternalMessageInfo

func (m *NumSRequest) GetNum() float64 {
	if m != nil {
		return m.Num
	}
	return 0
}

// Envia o resultado da soma
type NumReply struct {
	Result               float64  `protobuf:"fixed64,3,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumReply) Reset()         { *m = NumReply{} }
func (m *NumReply) String() string { return proto.CompactTextString(m) }
func (*NumReply) ProtoMessage()    {}
func (*NumReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_efa30b76d83302dd, []int{2}
}

func (m *NumReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumReply.Unmarshal(m, b)
}
func (m *NumReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumReply.Marshal(b, m, deterministic)
}
func (m *NumReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumReply.Merge(m, src)
}
func (m *NumReply) XXX_Size() int {
	return xxx_messageInfo_NumReply.Size(m)
}
func (m *NumReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NumReply.DiscardUnknown(m)
}

var xxx_messageInfo_NumReply proto.InternalMessageInfo

func (m *NumReply) GetResult() float64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*NumRequest)(nil), "calculator.NumRequest")
	proto.RegisterType((*NumSRequest)(nil), "calculator.NumSRequest")
	proto.RegisterType((*NumReply)(nil), "calculator.NumReply")
}

func init() {
	proto.RegisterFile("calculator/calculator.proto", fileDescriptor_efa30b76d83302dd)
}

var fileDescriptor_efa30b76d83302dd = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0x4e, 0xcc, 0x49,
	0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x47, 0x30, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85,
	0xb8, 0x10, 0x22, 0x4a, 0x1a, 0x5c, 0x5c, 0x7e, 0xa5, 0xb9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5,
	0x25, 0x42, 0x3c, 0x5c, 0x8c, 0x89, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x8c, 0x41, 0x8c, 0x89, 0x20,
	0x5e, 0x92, 0x04, 0x13, 0x84, 0x97, 0xa4, 0x24, 0xcf, 0xc5, 0xed, 0x57, 0x9a, 0x1b, 0x0c, 0x53,
	0x2a, 0xc0, 0xc5, 0x9c, 0x57, 0x9a, 0x0b, 0x55, 0x0c, 0x62, 0x2a, 0x29, 0x71, 0x71, 0x80, 0x8d,
	0x2a, 0xc8, 0xa9, 0x14, 0x12, 0xe3, 0x62, 0x2b, 0x4a, 0x2d, 0x2e, 0xcd, 0x29, 0x91, 0x60, 0x06,
	0x2b, 0x80, 0xf2, 0x8c, 0xee, 0xb1, 0x70, 0x71, 0x39, 0xc3, 0x6d, 0x17, 0x32, 0xe3, 0x62, 0x09,
	0x2e, 0xcd, 0x75, 0x16, 0x12, 0xd3, 0x43, 0x72, 0x24, 0xc2, 0x3d, 0x52, 0x22, 0x18, 0xe2, 0x05,
	0x39, 0x95, 0x4a, 0x0c, 0x10, 0x7d, 0x49, 0xa4, 0xeb, 0x33, 0xe7, 0x62, 0xf5, 0x2d, 0xcd, 0x29,
	0x21, 0xcb, 0x42, 0x97, 0xcc, 0x32, 0xd2, 0xf5, 0x59, 0x71, 0xb1, 0x06, 0x97, 0xe6, 0xba, 0x3a,
	0x0b, 0x89, 0xa3, 0x29, 0x08, 0x26, 0xa0, 0x53, 0x83, 0x11, 0xa2, 0x37, 0x89, 0x3c, 0xbd, 0xd6,
	0x5c, 0x6c, 0x20, 0x8f, 0x92, 0x6d, 0xb1, 0x4b, 0x66, 0x19, 0x79, 0x7a, 0x6d, 0xb8, 0x38, 0x1c,
	0x73, 0x72, 0x40, 0x51, 0x5c, 0x4c, 0x6a, 0x60, 0x19, 0x30, 0x0a, 0x39, 0x70, 0x71, 0xc2, 0x74,
	0xbb, 0x92, 0x61, 0xbb, 0x01, 0xa3, 0x93, 0x6e, 0x94, 0x76, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92,
	0x5e, 0x72, 0x7e, 0xae, 0xbe, 0x4b, 0x62, 0x59, 0x66, 0x70, 0x66, 0x4e, 0x59, 0x62, 0x80, 0x3e,
	0xd6, 0x0c, 0x91, 0xc4, 0x06, 0xce, 0x11, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x17, 0xd9,
	0x1c, 0x35, 0x30, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorClient interface {
	// Função RPC
	SumC(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (*NumReply, error)
	SubC(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (*NumReply, error)
	MultC(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (*NumReply, error)
	DivC(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (*NumReply, error)
	SumEC(ctx context.Context, opts ...grpc.CallOption) (Calculator_SumECClient, error)
	SubEC(ctx context.Context, opts ...grpc.CallOption) (Calculator_SubECClient, error)
	MultEC(ctx context.Context, opts ...grpc.CallOption) (Calculator_MultECClient, error)
	DivEC(ctx context.Context, opts ...grpc.CallOption) (Calculator_DivECClient, error)
	AllCalcs(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (Calculator_AllCalcsClient, error)
	AllCalcsE(ctx context.Context, opts ...grpc.CallOption) (Calculator_AllCalcsEClient, error)
}

type calculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorClient(cc grpc.ClientConnInterface) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) SumC(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (*NumReply, error) {
	out := new(NumReply)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/SumC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) SubC(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (*NumReply, error) {
	out := new(NumReply)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/SubC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) MultC(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (*NumReply, error) {
	out := new(NumReply)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/MultC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) DivC(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (*NumReply, error) {
	out := new(NumReply)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/DivC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) SumEC(ctx context.Context, opts ...grpc.CallOption) (Calculator_SumECClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[0], "/calculator.Calculator/SumEC", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorSumECClient{stream}
	return x, nil
}

type Calculator_SumECClient interface {
	Send(*NumSRequest) error
	CloseAndRecv() (*NumReply, error)
	grpc.ClientStream
}

type calculatorSumECClient struct {
	grpc.ClientStream
}

func (x *calculatorSumECClient) Send(m *NumSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorSumECClient) CloseAndRecv() (*NumReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NumReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) SubEC(ctx context.Context, opts ...grpc.CallOption) (Calculator_SubECClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[1], "/calculator.Calculator/SubEC", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorSubECClient{stream}
	return x, nil
}

type Calculator_SubECClient interface {
	Send(*NumSRequest) error
	CloseAndRecv() (*NumReply, error)
	grpc.ClientStream
}

type calculatorSubECClient struct {
	grpc.ClientStream
}

func (x *calculatorSubECClient) Send(m *NumSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorSubECClient) CloseAndRecv() (*NumReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NumReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) MultEC(ctx context.Context, opts ...grpc.CallOption) (Calculator_MultECClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[2], "/calculator.Calculator/MultEC", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorMultECClient{stream}
	return x, nil
}

type Calculator_MultECClient interface {
	Send(*NumSRequest) error
	CloseAndRecv() (*NumReply, error)
	grpc.ClientStream
}

type calculatorMultECClient struct {
	grpc.ClientStream
}

func (x *calculatorMultECClient) Send(m *NumSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorMultECClient) CloseAndRecv() (*NumReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NumReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) DivEC(ctx context.Context, opts ...grpc.CallOption) (Calculator_DivECClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[3], "/calculator.Calculator/DivEC", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorDivECClient{stream}
	return x, nil
}

type Calculator_DivECClient interface {
	Send(*NumSRequest) error
	CloseAndRecv() (*NumReply, error)
	grpc.ClientStream
}

type calculatorDivECClient struct {
	grpc.ClientStream
}

func (x *calculatorDivECClient) Send(m *NumSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorDivECClient) CloseAndRecv() (*NumReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NumReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) AllCalcs(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (Calculator_AllCalcsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[4], "/calculator.Calculator/AllCalcs", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorAllCalcsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Calculator_AllCalcsClient interface {
	Recv() (*NumReply, error)
	grpc.ClientStream
}

type calculatorAllCalcsClient struct {
	grpc.ClientStream
}

func (x *calculatorAllCalcsClient) Recv() (*NumReply, error) {
	m := new(NumReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) AllCalcsE(ctx context.Context, opts ...grpc.CallOption) (Calculator_AllCalcsEClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[5], "/calculator.Calculator/AllCalcsE", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorAllCalcsEClient{stream}
	return x, nil
}

type Calculator_AllCalcsEClient interface {
	Send(*NumSRequest) error
	Recv() (*NumReply, error)
	grpc.ClientStream
}

type calculatorAllCalcsEClient struct {
	grpc.ClientStream
}

func (x *calculatorAllCalcsEClient) Send(m *NumSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorAllCalcsEClient) Recv() (*NumReply, error) {
	m := new(NumReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServer is the server API for Calculator service.
type CalculatorServer interface {
	// Função RPC
	SumC(context.Context, *NumRequest) (*NumReply, error)
	SubC(context.Context, *NumRequest) (*NumReply, error)
	MultC(context.Context, *NumRequest) (*NumReply, error)
	DivC(context.Context, *NumRequest) (*NumReply, error)
	SumEC(Calculator_SumECServer) error
	SubEC(Calculator_SubECServer) error
	MultEC(Calculator_MultECServer) error
	DivEC(Calculator_DivECServer) error
	AllCalcs(*NumRequest, Calculator_AllCalcsServer) error
	AllCalcsE(Calculator_AllCalcsEServer) error
}

// UnimplementedCalculatorServer can be embedded to have forward compatible implementations.
type UnimplementedCalculatorServer struct {
}

func (*UnimplementedCalculatorServer) SumC(ctx context.Context, req *NumRequest) (*NumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SumC not implemented")
}
func (*UnimplementedCalculatorServer) SubC(ctx context.Context, req *NumRequest) (*NumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubC not implemented")
}
func (*UnimplementedCalculatorServer) MultC(ctx context.Context, req *NumRequest) (*NumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultC not implemented")
}
func (*UnimplementedCalculatorServer) DivC(ctx context.Context, req *NumRequest) (*NumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DivC not implemented")
}
func (*UnimplementedCalculatorServer) SumEC(srv Calculator_SumECServer) error {
	return status.Errorf(codes.Unimplemented, "method SumEC not implemented")
}
func (*UnimplementedCalculatorServer) SubEC(srv Calculator_SubECServer) error {
	return status.Errorf(codes.Unimplemented, "method SubEC not implemented")
}
func (*UnimplementedCalculatorServer) MultEC(srv Calculator_MultECServer) error {
	return status.Errorf(codes.Unimplemented, "method MultEC not implemented")
}
func (*UnimplementedCalculatorServer) DivEC(srv Calculator_DivECServer) error {
	return status.Errorf(codes.Unimplemented, "method DivEC not implemented")
}
func (*UnimplementedCalculatorServer) AllCalcs(req *NumRequest, srv Calculator_AllCalcsServer) error {
	return status.Errorf(codes.Unimplemented, "method AllCalcs not implemented")
}
func (*UnimplementedCalculatorServer) AllCalcsE(srv Calculator_AllCalcsEServer) error {
	return status.Errorf(codes.Unimplemented, "method AllCalcsE not implemented")
}

func RegisterCalculatorServer(s *grpc.Server, srv CalculatorServer) {
	s.RegisterService(&_Calculator_serviceDesc, srv)
}

func _Calculator_SumC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).SumC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/SumC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).SumC(ctx, req.(*NumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_SubC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).SubC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/SubC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).SubC(ctx, req.(*NumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_MultC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).MultC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/MultC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).MultC(ctx, req.(*NumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_DivC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).DivC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/DivC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).DivC(ctx, req.(*NumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_SumEC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).SumEC(&calculatorSumECServer{stream})
}

type Calculator_SumECServer interface {
	SendAndClose(*NumReply) error
	Recv() (*NumSRequest, error)
	grpc.ServerStream
}

type calculatorSumECServer struct {
	grpc.ServerStream
}

func (x *calculatorSumECServer) SendAndClose(m *NumReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorSumECServer) Recv() (*NumSRequest, error) {
	m := new(NumSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Calculator_SubEC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).SubEC(&calculatorSubECServer{stream})
}

type Calculator_SubECServer interface {
	SendAndClose(*NumReply) error
	Recv() (*NumSRequest, error)
	grpc.ServerStream
}

type calculatorSubECServer struct {
	grpc.ServerStream
}

func (x *calculatorSubECServer) SendAndClose(m *NumReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorSubECServer) Recv() (*NumSRequest, error) {
	m := new(NumSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Calculator_MultEC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).MultEC(&calculatorMultECServer{stream})
}

type Calculator_MultECServer interface {
	SendAndClose(*NumReply) error
	Recv() (*NumSRequest, error)
	grpc.ServerStream
}

type calculatorMultECServer struct {
	grpc.ServerStream
}

func (x *calculatorMultECServer) SendAndClose(m *NumReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorMultECServer) Recv() (*NumSRequest, error) {
	m := new(NumSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Calculator_DivEC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).DivEC(&calculatorDivECServer{stream})
}

type Calculator_DivECServer interface {
	SendAndClose(*NumReply) error
	Recv() (*NumSRequest, error)
	grpc.ServerStream
}

type calculatorDivECServer struct {
	grpc.ServerStream
}

func (x *calculatorDivECServer) SendAndClose(m *NumReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorDivECServer) Recv() (*NumSRequest, error) {
	m := new(NumSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Calculator_AllCalcs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NumRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServer).AllCalcs(m, &calculatorAllCalcsServer{stream})
}

type Calculator_AllCalcsServer interface {
	Send(*NumReply) error
	grpc.ServerStream
}

type calculatorAllCalcsServer struct {
	grpc.ServerStream
}

func (x *calculatorAllCalcsServer) Send(m *NumReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Calculator_AllCalcsE_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).AllCalcsE(&calculatorAllCalcsEServer{stream})
}

type Calculator_AllCalcsEServer interface {
	Send(*NumReply) error
	Recv() (*NumSRequest, error)
	grpc.ServerStream
}

type calculatorAllCalcsEServer struct {
	grpc.ServerStream
}

func (x *calculatorAllCalcsEServer) Send(m *NumReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorAllCalcsEServer) Recv() (*NumSRequest, error) {
	m := new(NumSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Calculator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SumC",
			Handler:    _Calculator_SumC_Handler,
		},
		{
			MethodName: "SubC",
			Handler:    _Calculator_SubC_Handler,
		},
		{
			MethodName: "MultC",
			Handler:    _Calculator_MultC_Handler,
		},
		{
			MethodName: "DivC",
			Handler:    _Calculator_DivC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SumEC",
			Handler:       _Calculator_SumEC_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SubEC",
			Handler:       _Calculator_SubEC_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MultEC",
			Handler:       _Calculator_MultEC_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DivEC",
			Handler:       _Calculator_DivEC_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AllCalcs",
			Handler:       _Calculator_AllCalcs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AllCalcsE",
			Handler:       _Calculator_AllCalcsE_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculator/calculator.proto",
}
